B1. Tạo Project 
- Tạo folder lambda_api_gateway
- cd lambda_api_gateway
    + tạo main.tf
    + tạo variables.tf
    + tạo output.tf
B2. Tạo S3 Bucket
- Trong main.tf thêm code sau :
------------------------------------------------------------
# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: MPL-2.0

provider "aws" {
  region = var.aws_region

  default_tags {
    tags = {
      hashicorp-learn = "lambda-api-gateway"
    }
  }

}

resource "random_pet" "lambda_bucket_name" {
  prefix = "learn-terraform-functions"
  length = 4
}

resource "aws_s3_bucket" "lambda_bucket" {
  bucket = random_pet.lambda_bucket_name.id
}

resource "aws_s3_bucket_acl" "bucket_acl" {
  bucket = aws_s3_bucket.lambda_bucket.id
  acl    = "private"
}
------------------------------------------------------------
- Trong output.tf thêm code :
------------------------------------------------------------
# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: MPL-2.0

# Output value definitions

output "lambda_bucket_name" {
  description = "Name of the S3 bucket used to store function code."

  value = aws_s3_bucket.lambda_bucket.id
}
------------------------------------------------------------
- Trong variable.tf thêm code :
# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: MPL-2.0

# Input variable definitions
------------------------------------------------------------
variable "aws_region" {
  description = "AWS region for all resources."

  type    = string
  default = "ap-southeast-1"
}
------------------------------------------------------------
- Chạy lệnh :
$ terraform init
$ terraform apply
=> lúc này trên S3 tạo ra bucket có tên : learn-terraform-functions_xxxxxxxxxxxxxxxxxxxxxxx
Note : nếu lỗi ở ACLs thì bỏ qua cũng không sao

B3. Tạo file chưa code cho lambda
- Tạo thư mục hello-world, và thêm một file hello.js với nội dung :
------------------------------------------------------------
module.exports.handler = async (event) => {
  console.log('Event: ', event);
  let responseMessage = 'Hello, World!';

  return {
    statusCode: 200,
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      message: responseMessage,
    }),
  }
}
------------------------------------------------------------
- Trong main.tf thêm đọan code sau :
------------------------------------------------------------
data "archive_file" "lambda_hello_world" {
  type = "zip"

  source_dir  = "${path.module}/hello-world"
  output_path = "${path.module}/hello-world.zip"
}

resource "aws_s3_object" "lambda_hello_world" {
  bucket = aws_s3_bucket.lambda_bucket.id

  key    = "hello-world.zip"
  source = data.archive_file.lambda_hello_world.output_path

  etag = filemd5(data.archive_file.lambda_hello_world.output_path)
}
------------------------------------------------------------
- Chạy lệnh :
$ terraform apply
=>> Lúc này trong bucket vừa tạo ở B2 sẽ có file hello-world.zip

B4. Tạo lambda function
------------------------------------------------------------
- Trong main.tf tiếp tục thêm đoạn code sau :
resource "aws_lambda_function" "hello_world" {
  function_name = "HelloWorld"

  s3_bucket = aws_s3_bucket.lambda_bucket.id
  s3_key    = aws_s3_object.lambda_hello_world.key

  runtime = "nodejs18.x"
  handler = "hello.handler"

  source_code_hash = data.archive_file.lambda_hello_world.output_base64sha256

  role = aws_iam_role.lambda_exec.arn
}

resource "aws_cloudwatch_log_group" "hello_world" {
  name = "/aws/lambda/${aws_lambda_function.hello_world.function_name}"

  retention_in_days = 30
}

resource "aws_iam_role" "lambda_exec" {
  name = "serverless_lambda"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Action = "sts:AssumeRole"
      Effect = "Allow"
      Sid    = ""
      Principal = {
        Service = "lambda.amazonaws.com"
      }
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "lambda_policy" {
  role       = aws_iam_role.lambda_exec.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
}
------------------------------------------------------------
- Trong output.tf thêm đoạn code :
------------------------------------------------------------
output "function_name" {
  description = "Name of the Lambda function."

  value = aws_lambda_function.hello_world.function_name
}
------------------------------------------------------------
- Chạy lệnh ::
$ terraform apply 
=>> Lúc này function có tên HelloWorld được tạo
B5. Tạo HTTP API with API gateway
- Trong main.tf thêm code :
------------------------------------------------------------
resource "aws_apigatewayv2_api" "lambda" {
  name          = "serverless_lambda_gw"
  protocol_type = "HTTP"
}

resource "aws_apigatewayv2_stage" "lambda" {
  api_id = aws_apigatewayv2_api.lambda.id

  name        = "serverless_lambda_stage"
  auto_deploy = true

  access_log_settings {
    destination_arn = aws_cloudwatch_log_group.api_gw.arn

    format = jsonencode({
      requestId               = "$context.requestId"
      sourceIp                = "$context.identity.sourceIp"
      requestTime             = "$context.requestTime"
      protocol                = "$context.protocol"
      httpMethod              = "$context.httpMethod"
      resourcePath            = "$context.resourcePath"
      routeKey                = "$context.routeKey"
      status                  = "$context.status"
      responseLength          = "$context.responseLength"
      integrationErrorMessage = "$context.integrationErrorMessage"
      }
    )
  }
}

resource "aws_apigatewayv2_integration" "hello_world" {
  api_id = aws_apigatewayv2_api.lambda.id

  integration_uri    = aws_lambda_function.hello_world.invoke_arn
  integration_type   = "AWS_PROXY"
  integration_method = "POST"
}

resource "aws_apigatewayv2_route" "hello_world" {
  api_id = aws_apigatewayv2_api.lambda.id

  route_key = "GET /hello"
  target    = "integrations/${aws_apigatewayv2_integration.hello_world.id}"
}

resource "aws_cloudwatch_log_group" "api_gw" {
  name = "/aws/api_gw/${aws_apigatewayv2_api.lambda.name}"

  retention_in_days = 30
}

resource "aws_lambda_permission" "api_gw" {
  statement_id  = "AllowExecutionFromAPIGateway"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.hello_world.function_name
  principal     = "apigateway.amazonaws.com"

  source_arn = "${aws_apigatewayv2_api.lambda.execution_arn}/*/*"
}
------------------------------------------------------------
- Trong output.tf thêm đoạn code :
------------------------------------------------------------
output "base_url" {
  description = "Base URL for API Gateway stage."

  value = aws_apigatewayv2_stage.lambda.invoke_url
}
------------------------------------------------------------
-- Chạy lệnh :
$ terraform apply
=>> Lúc này 1 API GATEWAY được tạo ra và gắn với lambda function đã tạo 
B6. Update Lambda Function
- Trong file hello.json sửa code như sau :
------------------------------------------------------------
module.exports.handler = async (event) => {
    console.log('Event: ', event)
    let responseMessage = 'Hello, World!';
 
//  if (event.queryStringParameters && event.queryStringParameters['Name']) {
//      responseMessage = 'Hello, ' + event.queryStringParameters['Name'] + '!';
//    }
//  
    return {
      statusCode: 200,
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        message: responseMessage,
      }),
    }
  }
------------------------------------------------------------
- Chạy lệnh :
$ terraform apply 
=>> Lúc này file zip và lambda function sẽ được cập nhât code mới
B7. Destroy tài nguyên
Chạy lệnh :
$ terraform destroy

Nguồn : https://developer.hashicorp.com/terraform/tutorials/aws/lambda-api-gateway

